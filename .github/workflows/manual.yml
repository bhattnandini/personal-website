name: Build and Deploy React app to AWS S3

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

permissions:
  issues: write  # Allow creating issues (used by ZAP)
  security-events: write  # Allow writing to the Security tab (used by trivy for IaC)

jobs:
  website-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Install Newman
      #   run: npm install -g newman

      # - name: Run Postman Tests
      #   run: |
      #     newman run Testing/Postman/send_email.json \
      #       --reporters cli,json \
      #       --reporter-json-export newman-results.json \
      #       --suppress-exit-code
      #       # --environment path/to/your/postman_environment.json \
      #       # ensure this commands always returns 0, even if tests fail because otherwise, JSON will won't be created and uploaded

      # - name: Upload Newman Results
      # # This step will run regardless of previous step's outcome (even if a few tests fail artifacts will be uploaded)
      #   if: always()  
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: newman-results
      #     path: newman-results.json
          
      # - name: Install Trivy vulnerability scanner
      #   run: |
      #     sudo apt-get install wget apt-transport-https gnupg lsb-release
      #     wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
      #     echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
      #     sudo apt-get update
      #     sudo apt-get install trivy

      # - name: Run Trivy vulnerability scanner in IaC mode to scan terraform file 
      #   run:  trivy config --severity CRITICAL,HIGH --format sarif --output trivy-terraform-results.sarif ./terraform/main.tf

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: 'trivy-terraform-results.sarif'
          
      # - name: Build docker image
      #   run:  docker build -t my-react-app .
      
      # - name: Run Trivy vulnerability scanner docker image 
      #   run:  trivy image --severity HIGH,CRITICAL --format json --output trivy-docker-results.json my-react-app
        
      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: dockerimage-artifact
      #     path: trivy-docker-results.json
   
      # # Debug steps
      # - name: Print Node.js version
      #   run: node --version

      # - name: Print npm version
      #   run: npm --version
      
      # - name: Print environment variables
      #   run: printenv

      # # Step 2: Set up Node.js environment
      # - name: Set up Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: '20.15.0' # You can specify your preferred Node.js version

      # speed up pipeline by caching node modules 
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      # - name: Upgrade AWS CLI
      #   run: pip install --upgrade awscli
        
      - name: Install dependencies
        run: npm ci  # npm ci is preferred over npm install for CI environments

      # # Lint the code using ESLint
      # - name: Run ESLint
      #   run: npm run lint

      # # Upload ESLint results as an artifact
      # - name: Upload ESLint results
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: eslint-report
      #     path: eslint-report.json

      # Step 4: Build the React app
      # - name: Build React app
      #   run: npm run build # Treating warnings as errors because process.env.CI = true, most CI servers set this as true by default but we need to turn it off because warnings should not be treated as errors 
      #   env:
      #     CI: false

      # - name: Start the Web App (React)
      #   run: npm start &
      #   env:
      #     CI: false

      #  # Step 5: Run Cypress tests in headless mode
      # - name: Run Cypress tests
      #   run: npx cypress run

      # # Step 6: Upload Cypress videos and screenshots as artifacts for later viewing (optional)
      # - name: Upload Cypress Artifacts
      #   uses: actions/upload-artifact@v4
      #   if: failure()  # Only upload if tests fail
      #   with:
      #     name: cypress-artifacts
      #     path: cypress/videos

      # # Step 7: Upload test results (optional)
      # - name: Upload Cypress Results
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: cypress-results
      #     path: cypress/reports

      # # Scan for vulnerabilities using OWASP ZAP
      # - name: OWASP ZAP Security Scan
      #   uses: zaproxy/action-full-scan@v0.10.0
      #   with:
      #     target: 'http://localhost:3000'
      #     fail-action: true
      #     format: 'html'
      
      # Upload artifacts
      # - name: Upload ZAP Scan Report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: zap-report
      #     path: zap-report.html
        
      # - name: Deploy React app to AWS S3
      #   run:
      #     aws s3 sync build/ s3://nandinibhatt.me/ --delete --acl public-read --region us-east-2
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Invalidate CloudFront Cache
      #   run:
      #     aws cloudfront create-invalidation --distribution-id E1JHKWLDY7Q5ZL --paths "/*"
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install JMeter
        run: |
          sudo apt-get update
          sudo apt-get install -y jmeter

      - name: Run JMeter Test Plan
        run: |
          jmeter -n -t Testing/JMeter/Test_Plan.jmx -l Testing/JMeter/results.jtl -j Testing/JMeter/jmeter.log -Jlog_level.jmeter=DEBUG
          # jmeter -n -t Testing/JMeter/Test_Plan.jmx -l Testing/JMeter/results.jtl -j Testing/JMeter/jmeter.log

      - name: Upload JMeter Results
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results
          path: |
            Testing/JMeter/results.jtl
            Testing/JMeter/jmeter.log

      # - name: Notify on Failure
      #   if: failure() # Execute only if previous steps failed
      #   run: |
      #     aws sns publish --topic-arn arn:aws:sns:us-east-2:975050059984:codestar-notifications- --message "Your portfolio deployment has failed."
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
